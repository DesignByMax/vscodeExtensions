/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"debugProtocol.js","sourceRoot":"","sources":["../src/debugProtocol.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;AAEhG,YAAY,CAAC;AAisCZ","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\n/** Declaration module describing the VS Code debug protocol.\n\tAuto-generated from json schema. Do not edit manually.\n*/\nexport module DebugProtocol {\n\n\t/** Base class of requests, responses, and events. */\n\texport interface ProtocolMessage {\n\t\t/** Sequence number. */\n\t\tseq: number;\n\t\t/** One of 'request', 'response', or 'event'. */\n\t\ttype: string;\n\t}\n\n\t/** A client or server-initiated request. */\n\texport interface Request extends ProtocolMessage {\n\t\t// type: 'request';\n\t\t/** The command to execute. */\n\t\tcommand: string;\n\t\t/** Object containing arguments for the command. */\n\t\targuments?: any;\n\t}\n\n\t/** Server-initiated event. */\n\texport interface Event extends ProtocolMessage {\n\t\t// type: 'event';\n\t\t/** Type of event. */\n\t\tevent: string;\n\t\t/** Event-specific information. */\n\t\tbody?: any;\n\t}\n\n\t/** Response to a request. */\n\texport interface Response extends ProtocolMessage {\n\t\t// type: 'response';\n\t\t/** Sequence number of the corresponding request. */\n\t\trequest_seq: number;\n\t\t/** Outcome of the request. */\n\t\tsuccess: boolean;\n\t\t/** The command requested. */\n\t\tcommand: string;\n\t\t/** Contains error message if success == false. */\n\t\tmessage?: string;\n\t\t/** Contains request result if success is true and optional error details if success is false. */\n\t\tbody?: any;\n\t}\n\n\t/** Event message for 'initialized' event type.\n\t\tThis event indicates that the debug adapter is ready to accept configuration requests (e.g. SetBreakpointsRequest, SetExceptionBreakpointsRequest).\n\t\tA debug adapter is expected to send this event when it is ready to accept configuration requests (but not before the InitializeRequest has finished).\n\t\tThe sequence of events/requests is as follows:\n\t\t- adapters sends InitializedEvent (after the InitializeRequest has returned)\n\t\t- frontend sends zero or more SetBreakpointsRequest\n\t\t- frontend sends one SetFunctionBreakpointsRequest\n\t\t- frontend sends a SetExceptionBreakpointsRequest if one or more exceptionBreakpointFilters have been defined (or if supportsConfigurationDoneRequest is not defined or false)\n\t\t- frontend sends other future configuration requests\n\t\t- frontend sends one ConfigurationDoneRequest to indicate the end of the configuration\n\t*/\n\texport interface InitializedEvent extends Event {\n\t\t// event: 'initialized';\n\t}\n\n\t/** Event message for 'stopped' event type.\n\t\tThe event indicates that the execution of the debuggee has stopped due to some condition.\n\t\tThis can be caused by a break point previously set, a stepping action has completed, by executing a debugger statement etc.\n\t*/\n\texport interface StoppedEvent extends Event {\n\t\t// event: 'stopped';\n\t\tbody: {\n\t\t\t/** The reason for the event (such as: 'step', 'breakpoint', 'exception', 'pause'). This string is shown in the UI. */\n\t\t\treason: string;\n\t\t\t/** The thread which was stopped. */\n\t\t\tthreadId?: number;\n\t\t\t/** Additional information. E.g. if reason is 'exception', text contains the exception name. This string is shown in the UI. */\n\t\t\ttext?: string;\n\t\t\t/** If allThreadsStopped is true, a debug adapter can announce that all threads have stopped.\n\t\t\t\t*  The client should use this information to enable that all threads can be expanded to access their stacktraces.\n\t\t\t\t*  If the attribute is missing or false, only the thread with the given threadId can be expanded.\n\t\t\t*/\n\t\t\tallThreadsStopped?: boolean;\n\t\t};\n\t}\n\n\t/** Event message for 'continued' event type.\n\t\tThe event indicates that the execution of the debuggee has continued.\n\t\tPlease note: a debug adapter is not expected to send this event in response to a request that implies that execution continues, e.g. 'launch' or 'continue'.\n\t\tIt is only necessary to send a ContinuedEvent if there was no previous request that implied this.\n\t*/\n\texport interface ContinuedEvent extends Event {\n\t\t// event: 'continued';\n\t\tbody: {\n\t\t\t/** The thread which was continued. */\n\t\t\tthreadId: number;\n\t\t\t/** If allThreadsContinued is true, a debug adapter can announce that all threads have continued. */\n\t\t\tallThreadsContinued?: boolean;\n\t\t};\n\t}\n\n\t/** Event message for 'exited' event type.\n\t\tThe event indicates that the debuggee has exited.\n\t*/\n\texport interface ExitedEvent extends Event {\n\t\t// event: 'exited';\n\t\tbody: {\n\t\t\t/** The exit code returned from the debuggee. */\n\t\t\texitCode: number;\n\t\t};\n\t}\n\n\t/** Event message for 'terminated' event types.\n\t\tThe event indicates that debugging of the debuggee has terminated.\n\t*/\n\texport interface TerminatedEvent extends Event {\n\t\t// event: 'terminated';\n\t\tbody?: {\n\t\t\t/** A debug adapter may set 'restart' to true to request that the front end restarts the session. */\n\t\t\trestart?: boolean;\n\t\t};\n\t}\n\n\t/** Event message for 'thread' event type.\n\t\tThe event indicates that a thread has started or exited.\n\t*/\n\texport interface ThreadEvent extends Event {\n\t\t// event: 'thread';\n\t\tbody: {\n\t\t\t/** The reason for the event (such as: 'started', 'exited'). */\n\t\t\treason: string;\n\t\t\t/** The identifier of the thread. */\n\t\t\tthreadId: number;\n\t\t};\n\t}\n\n\t/** Event message for 'output' event type.\n\t\tThe event indicates that the target has produced output.\n\t*/\n\texport interface OutputEvent extends Event {\n\t\t// event: 'output';\n\t\tbody: {\n\t\t\t/** The category of output (such as: 'console', 'stdout', 'stderr', 'telemetry'). If not specified, 'console' is assumed. */\n\t\t\tcategory?: string;\n\t\t\t/** The output to report. */\n\t\t\toutput: string;\n\t\t\t/** Optional data to report. For the 'telemetry' category the data will be sent to telemetry, for the other categories the data is shown in JSON format. */\n\t\t\tdata?: any;\n\t\t};\n\t}\n\n\t/** Event message for 'breakpoint' event type.\n\t\tThe event indicates that some information about a breakpoint has changed.\n\t*/\n\texport interface BreakpointEvent extends Event {\n\t\t// event: 'breakpoint';\n\t\tbody: {\n\t\t\t/** The reason for the event (such as: 'changed', 'new'). */\n\t\t\treason: string;\n\t\t\t/** The breakpoint. */\n\t\t\tbreakpoint: Breakpoint;\n\t\t};\n\t}\n\n\t/** Event message for 'module' event type.\n\t\tThe event indicates that some information about a module has changed.\n\t*/\n\texport interface ModuleEvent extends Event {\n\t\t// event: 'module';\n\t\tbody: {\n\t\t\t/** The reason for the event. */\n\t\t\treason: 'new' | 'changed' | 'removed';\n\t\t\t/** The new, changed, or removed module. In case of 'removed' only the module id is used. */\n\t\t\tmodule: Module;\n\t\t};\n\t}\n\n\t/** runInTerminal request; value of command field is 'runInTerminal'.\n\t\tWith this request a debug adapter can run a command in a terminal.\n\t*/\n\texport interface RunInTerminalRequest extends Request {\n\t\t// command: 'runInTerminal';\n\t\targuments: RunInTerminalRequestArguments;\n\t}\n\n\t/** Arguments for 'runInTerminal' request. */\n\texport interface RunInTerminalRequestArguments {\n\t\t/** What kind of terminal to launch. */\n\t\tkind?: 'integrated' | 'external';\n\t\t/** Optional title of the terminal. */\n\t\ttitle?: string;\n\t\t/** Working directory of the command. */\n\t\tcwd: string;\n\t\t/** List of arguments. The first argument is the command to run. */\n\t\targs: string[];\n\t\t/** Environment key-value pairs that are added to the default environment. */\n\t\tenv?: { [key: string]: string; };\n\t}\n\n\t/** Response to Initialize request. */\n\texport interface RunInTerminalResponse extends Response {\n\t\tbody: {\n\t\t\t/** The process ID. */\n\t\t\tprocessId?: number;\n\t\t};\n\t}\n\n\t/** On error that is whenever 'success' is false, the body can provide more details. */\n\texport interface ErrorResponse extends Response {\n\t\tbody: {\n\t\t\t/** An optional, structured error message. */\n\t\t\terror?: Message;\n\t\t};\n\t}\n\n\t/** Initialize request; value of command field is 'initialize'. */\n\texport interface InitializeRequest extends Request {\n\t\t// command: 'initialize';\n\t\targuments: InitializeRequestArguments;\n\t}\n\n\t/** Arguments for 'initialize' request. */\n\texport interface InitializeRequestArguments {\n\t\t/** The ID of the debugger adapter. Used to select or verify debugger adapter. */\n\t\tadapterID: string;\n\t\t/** If true all line numbers are 1-based (default). */\n\t\tlinesStartAt1?: boolean;\n\t\t/** If true all column numbers are 1-based (default). */\n\t\tcolumnsStartAt1?: boolean;\n\t\t/** Determines in what format paths are specified. Possible values are 'path' or 'uri'. The default is 'path', which is the native format. */\n\t\tpathFormat?: string;\n\t\t/** Client supports the optional type attribute for variables. */\n\t\tsupportsVariableType?: boolean;\n\t\t/** Client supports the paging of variables. */\n\t\tsupportsVariablePaging?: boolean;\n\t\t/** Client supports the runInTerminal request. */\n\t\tsupportsRunInTerminalRequest?: boolean;\n\t}\n\n\t/** Response to 'initialize' request. */\n\texport interface InitializeResponse extends Response {\n\t\t/** The capabilities of this debug adapter. */\n\t\tbody?: Capabilities;\n\t}\n\n\t/** ConfigurationDone request; value of command field is 'configurationDone'.\n\t\tThe client of the debug protocol must send this request at the end of the sequence of configuration requests (which was started by the InitializedEvent).\n\t*/\n\texport interface ConfigurationDoneRequest extends Request {\n\t\t// command: 'configurationDone';\n\t\targuments?: ConfigurationDoneArguments;\n\t}\n\n\t/** Arguments for 'configurationDone' request.\n\t\tThe configurationDone request has no standardized attributes.\n\t*/\n\texport interface ConfigurationDoneArguments {\n\t}\n\n\t/** Response to 'configurationDone' request. This is just an acknowledgement, so no body field is required. */\n\texport interface ConfigurationDoneResponse extends Response {\n\t}\n\n\t/** Launch request; value of command field is 'launch'. */\n\texport interface LaunchRequest extends Request {\n\t\t// command: 'launch';\n\t\targuments: LaunchRequestArguments;\n\t}\n\n\t/** Arguments for 'launch' request. */\n\texport interface LaunchRequestArguments {\n\t\t/** If noDebug is true the launch request should launch the program without enabling debugging. */\n\t\tnoDebug?: boolean;\n\t}\n\n\t/** Response to 'launch' request. This is just an acknowledgement, so no body field is required. */\n\texport interface LaunchResponse extends Response {\n\t}\n\n\t/** Attach request; value of command field is 'attach'. */\n\texport interface AttachRequest extends Request {\n\t\t// command: 'attach';\n\t\targuments: AttachRequestArguments;\n\t}\n\n\t/** Arguments for 'attach' request.\n\t\tThe attach request has no standardized attributes.\n\t*/\n\texport interface AttachRequestArguments {\n\t}\n\n\t/** Response to 'attach' request. This is just an acknowledgement, so no body field is required. */\n\texport interface AttachResponse extends Response {\n\t}\n\n\t/** Restart request; value of command field is 'restart'.\n\t\tRestarts a debug session. If the capability 'supportsRestartRequest' is missing or has the value false,\n\t\tthe client will implement 'restart' by terminating the debug adapter first and then launching it anew.\n\t\tA debug adapter can override this default behaviour by implementing a restart request\n\t\tand setting the capability 'supportsRestartRequest' to true.\n\t*/\n\texport interface RestartRequest extends Request {\n\t\t// command: 'restart';\n\t\targuments?: RestartArguments;\n\t}\n\n\t/** Arguments for 'restart' request.\n\t\tThe restart request has no standardized attributes.\n\t*/\n\texport interface RestartArguments {\n\t}\n\n\t/** Response to 'restart' request. This is just an acknowledgement, so no body field is required. */\n\texport interface RestartResponse extends Response {\n\t}\n\n\t/** Disconnect request; value of command field is 'disconnect'. */\n\texport interface DisconnectRequest extends Request {\n\t\t// command: 'disconnect';\n\t\targuments?: DisconnectArguments;\n\t}\n\n\t/** Arguments for 'disconnect' request.\n\t\tThe disconnect request has no standardized attributes.\n\t*/\n\texport interface DisconnectArguments {\n\t}\n\n\t/** Response to 'disconnect' request. This is just an acknowledgement, so no body field is required. */\n\texport interface DisconnectResponse extends Response {\n\t}\n\n\t/** SetBreakpoints request; value of command field is 'setBreakpoints'.\n\t\tSets multiple breakpoints for a single source and clears all previous breakpoints in that source.\n\t\tTo clear all breakpoint for a source, specify an empty array.\n\t\tWhen a breakpoint is hit, a StoppedEvent (event type 'breakpoint') is generated.\n\t*/\n\texport interface SetBreakpointsRequest extends Request {\n\t\t// command: 'setBreakpoints';\n\t\targuments: SetBreakpointsArguments;\n\t}\n\n\t/** Arguments for 'setBreakpoints' request. */\n\texport interface SetBreakpointsArguments {\n\t\t/** The source location of the breakpoints; either source.path or source.reference must be specified. */\n\t\tsource: Source;\n\t\t/** The code locations of the breakpoints. */\n\t\tbreakpoints?: SourceBreakpoint[];\n\t\t/** Deprecated: The code locations of the breakpoints. */\n\t\tlines?: number[];\n\t\t/** A value of true indicates that the underlying source has been modified which results in new breakpoint locations. */\n\t\tsourceModified?: boolean;\n\t}\n\n\t/** Response to 'setBreakpoints' request.\n\t\tReturned is information about each breakpoint created by this request.\n\t\tThis includes the actual code location and whether the breakpoint could be verified.\n\t\tThe breakpoints returned are in the same order as the elements of the 'breakpoints'\n\t\t(or the deprecated 'lines') in the SetBreakpointsArguments.\n\t*/\n\texport interface SetBreakpointsResponse extends Response {\n\t\tbody: {\n\t\t\t/** Information about the breakpoints. The array elements are in the same order as the elements of the 'breakpoints' (or the deprecated 'lines') in the SetBreakpointsArguments. */\n\t\t\tbreakpoints: Breakpoint[];\n\t\t};\n\t}\n\n\t/** SetFunctionBreakpoints request; value of command field is 'setFunctionBreakpoints'.\n\t\tSets multiple function breakpoints and clears all previous function breakpoints.\n\t\tTo clear all function breakpoint, specify an empty array.\n\t\tWhen a function breakpoint is hit, a StoppedEvent (event type 'function breakpoint') is generated.\n\t*/\n\texport interface SetFunctionBreakpointsRequest extends Request {\n\t\t// command: 'setFunctionBreakpoints';\n\t\targuments: SetFunctionBreakpointsArguments;\n\t}\n\n\t/** Arguments for 'setFunctionBreakpoints' request. */\n\texport interface SetFunctionBreakpointsArguments {\n\t\t/** The function names of the breakpoints. */\n\t\tbreakpoints: FunctionBreakpoint[];\n\t}\n\n\t/** Response to 'setFunctionBreakpoints' request.\n\t\tReturned is information about each breakpoint created by this request.\n\t*/\n\texport interface SetFunctionBreakpointsResponse extends Response {\n\t\tbody: {\n\t\t\t/** Information about the breakpoints. The array elements correspond to the elements of the 'breakpoints' array. */\n\t\t\tbreakpoints: Breakpoint[];\n\t\t};\n\t}\n\n\t/** SetExceptionBreakpoints request; value of command field is 'setExceptionBreakpoints'.\n\t\tEnable that the debuggee stops on exceptions with a StoppedEvent (event type 'exception').\n\t*/\n\texport interface SetExceptionBreakpointsRequest extends Request {\n\t\t// command: 'setExceptionBreakpoints';\n\t\targuments: SetExceptionBreakpointsArguments;\n\t}\n\n\t/** Arguments for 'setExceptionBreakpoints' request. */\n\texport interface SetExceptionBreakpointsArguments {\n\t\t/** Ids of enabled exception breakpoints. */\n\t\tfilters: string[];\n\t}\n\n\t/** Response to 'setExceptionBreakpoints' request. This is just an acknowledgement, so no body field is required. */\n\texport interface SetExceptionBreakpointsResponse extends Response {\n\t}\n\n\t/** Continue request; value of command field is 'continue'.\n\t\tThe request starts the debuggee to run again.\n\t*/\n\texport interface ContinueRequest extends Request {\n\t\t// command: 'continue';\n\t\targuments: ContinueArguments;\n\t}\n\n\t/** Arguments for 'continue' request. */\n\texport interface ContinueArguments {\n\t\t/** Continue execution for the specified thread (if possible). If the backend cannot continue on a single thread but will continue on all threads, it should set the allThreadsContinued attribute in the response to true. */\n\t\tthreadId: number;\n\t}\n\n\t/** Response to 'continue' request. */\n\texport interface ContinueResponse extends Response {\n\t\tbody: {\n\t\t\t/** If true, the continue request has ignored the specified thread and continued all threads instead. If this attribute is missing a value of 'true' is assumed for backward compatibility. */\n\t\t\tallThreadsContinued?: boolean;\n\t\t};\n\t}\n\n\t/** Next request; value of command field is 'next'.\n\t\tThe request starts the debuggee to run again for one step.\n\t\tThe debug adapter first sends the NextResponse and then a StoppedEvent (event type 'step') after the step has completed.\n\t*/\n\texport interface NextRequest extends Request {\n\t\t// command: 'next';\n\t\targuments: NextArguments;\n\t}\n\n\t/** Arguments for 'next' request. */\n\texport interface NextArguments {\n\t\t/** Execute 'next' for this thread. */\n\t\tthreadId: number;\n\t}\n\n\t/** Response to 'next' request. This is just an acknowledgement, so no body field is required. */\n\texport interface NextResponse extends Response {\n\t}\n\n\t/** StepIn request; value of command field is 'stepIn'.\n\t\tThe request starts the debuggee to step into a function/method if possible.\n\t\tIf it cannot step into a target, 'stepIn' behaves like 'next'.\n\t\tThe debug adapter first sends the StepInResponse and then a StoppedEvent (event type 'step') after the step has completed.\n\t\tIf there are multiple function/method calls (or other targets) on the source line,\n\t\tthe optional argument 'targetId' can be used to control into which target the 'stepIn' should occur.\n\t\tThe list of possible targets for a given source line can be retrieved via the 'stepInTargets' request.\n\t*/\n\texport interface StepInRequest extends Request {\n\t\t// command: 'stepIn';\n\t\targuments: StepInArguments;\n\t}\n\n\t/** Arguments for 'stepIn' request. */\n\texport interface StepInArguments {\n\t\t/** Execute 'stepIn' for this thread. */\n\t\tthreadId: number;\n\t\t/** Optional id of the target to step into. */\n\t\ttargetId?: number;\n\t}\n\n\t/** Response to 'stepIn' request. This is just an acknowledgement, so no body field is required. */\n\texport interface StepInResponse extends Response {\n\t}\n\n\t/** StepOut request; value of command field is 'stepOut'.\n\t\tThe request starts the debuggee to run again for one step.\n\t\tThe debug adapter first sends the StepOutResponse and then a StoppedEvent (event type 'step') after the step has completed.\n\t*/\n\texport interface StepOutRequest extends Request {\n\t\t// command: 'stepOut';\n\t\targuments: StepOutArguments;\n\t}\n\n\t/** Arguments for 'stepOut' request. */\n\texport interface StepOutArguments {\n\t\t/** Execute 'stepOut' for this thread. */\n\t\tthreadId: number;\n\t}\n\n\t/** Response to 'stepOut' request. This is just an acknowledgement, so no body field is required. */\n\texport interface StepOutResponse extends Response {\n\t}\n\n\t/** StepBack request; value of command field is 'stepBack'.\n\t\tThe request starts the debuggee to run one step backwards.\n\t\tThe debug adapter first sends the StepBackResponse and then a StoppedEvent (event type 'step') after the step has completed. Clients should only call this request if the capability supportsStepBack is true.\n\t*/\n\texport interface StepBackRequest extends Request {\n\t\t// command: 'stepBack';\n\t\targuments: StepBackArguments;\n\t}\n\n\t/** Arguments for 'stepBack' request. */\n\texport interface StepBackArguments {\n\t\t/** Exceute 'stepBack' for this thread. */\n\t\tthreadId: number;\n\t}\n\n\t/** Response to 'stepBack' request. This is just an acknowledgement, so no body field is required. */\n\texport interface StepBackResponse extends Response {\n\t}\n\n\t/** ReverseContinue request; value of command field is 'reverseContinue'.\n\t\tThe request starts the debuggee to run backward. Clients should only call this request if the capability supportsStepBack is true.\n\t*/\n\texport interface ReverseContinueRequest extends Request {\n\t\t// command: 'reverseContinue';\n\t\targuments: ReverseContinueArguments;\n\t}\n\n\t/** Arguments for 'reverseContinue' request. */\n\texport interface ReverseContinueArguments {\n\t\t/** Exceute 'reverseContinue' for this thread. */\n\t\tthreadId: number;\n\t}\n\n\t/** Response to 'reverseContinue' request. This is just an acknowledgement, so no body field is required. */\n\texport interface ReverseContinueResponse extends Response {\n\t}\n\n\t/** RestartFrame request; value of command field is 'restartFrame'.\n\t\tThe request restarts execution of the specified stackframe.\n\t\tThe debug adapter first sends the RestartFrameResponse and then a StoppedEvent (event type 'restart') after the restart has completed.\n\t*/\n\texport interface RestartFrameRequest extends Request {\n\t\t// command: 'restartFrame';\n\t\targuments: RestartFrameArguments;\n\t}\n\n\t/** Arguments for 'restartFrame' request. */\n\texport interface RestartFrameArguments {\n\t\t/** Restart this stackframe. */\n\t\tframeId: number;\n\t}\n\n\t/** Response to 'restartFrame' request. This is just an acknowledgement, so no body field is required. */\n\texport interface RestartFrameResponse extends Response {\n\t}\n\n\t/** Goto request; value of command field is 'goto'.\n\t\tThe request sets the location where the debuggee will continue to run.\n\t\tThis makes it possible to skip the execution of code or to executed code again.\n\t\tThe code between the current location and the goto target is not executed but skipped.\n\t\tThe debug adapter first sends the GotoResponse and then a StoppedEvent (event type 'goto').\n\t*/\n\texport interface GotoRequest extends Request {\n\t\t// command: 'goto';\n\t\targuments: GotoArguments;\n\t}\n\n\t/** Arguments for 'goto' request. */\n\texport interface GotoArguments {\n\t\t/** Set the goto target for this thread. */\n\t\tthreadId: number;\n\t\t/** The location where the debuggee will continue to run. */\n\t\ttargetId: number;\n\t}\n\n\t/** Response to 'goto' request. This is just an acknowledgement, so no body field is required. */\n\texport interface GotoResponse extends Response {\n\t}\n\n\t/** Pause request; value of command field is 'pause'.\n\t\tThe request suspenses the debuggee.\n\t\tThe debug adapter first sends the PauseResponse and then a StoppedEvent (event type 'pause') after the thread has been paused successfully.\n\t*/\n\texport interface PauseRequest extends Request {\n\t\t// command: 'pause';\n\t\targuments: PauseArguments;\n\t}\n\n\t/** Arguments for 'pause' request. */\n\texport interface PauseArguments {\n\t\t/** Pause execution for this thread. */\n\t\tthreadId: number;\n\t}\n\n\t/** Response to 'pause' request. This is just an acknowledgement, so no body field is required. */\n\texport interface PauseResponse extends Response {\n\t}\n\n\t/** StackTrace request; value of command field is 'stackTrace'. The request returns a stacktrace from the current execution state. */\n\texport interface StackTraceRequest extends Request {\n\t\t// command: 'stackTrace';\n\t\targuments: StackTraceArguments;\n\t}\n\n\t/** Arguments for 'stackTrace' request. */\n\texport interface StackTraceArguments {\n\t\t/** Retrieve the stacktrace for this thread. */\n\t\tthreadId: number;\n\t\t/** The index of the first frame to return; if omitted frames start at 0. */\n\t\tstartFrame?: number;\n\t\t/** The maximum number of frames to return. If levels is not specified or 0, all frames are returned. */\n\t\tlevels?: number;\n\t}\n\n\t/** Response to 'stackTrace' request. */\n\texport interface StackTraceResponse extends Response {\n\t\tbody: {\n\t\t\t/** The frames of the stackframe. If the array has length zero, there are no stackframes available.\n\t\t\t\tThis means that there is no location information available.\n\t\t\t*/\n\t\t\tstackFrames: StackFrame[];\n\t\t\t/** The total number of frames available. */\n\t\t\ttotalFrames?: number;\n\t\t};\n\t}\n\n\t/** Scopes request; value of command field is 'scopes'.\n\t\tThe request returns the variable scopes for a given stackframe ID.\n\t*/\n\texport interface ScopesRequest extends Request {\n\t\t// command: 'scopes';\n\t\targuments: ScopesArguments;\n\t}\n\n\t/** Arguments for 'scopes' request. */\n\texport interface ScopesArguments {\n\t\t/** Retrieve the scopes for this stackframe. */\n\t\tframeId: number;\n\t}\n\n\t/** Response to 'scopes' request. */\n\texport interface ScopesResponse extends Response {\n\t\tbody: {\n\t\t\t/** The scopes of the stackframe. If the array has length zero, there are no scopes available. */\n\t\t\tscopes: Scope[];\n\t\t};\n\t}\n\n\t/** Variables request; value of command field is 'variables'.\n\t\tRetrieves all child variables for the given variable reference.\n\t\tAn optional filter can be used to limit the fetched children to either named or indexed children.\n\t*/\n\texport interface VariablesRequest extends Request {\n\t\t// command: 'variables';\n\t\targuments: VariablesArguments;\n\t}\n\n\t/** Arguments for 'variables' request. */\n\texport interface VariablesArguments {\n\t\t/** The Variable reference. */\n\t\tvariablesReference: number;\n\t\t/** Optional filter to limit the child variables to either named or indexed. If ommited, both types are fetched. */\n\t\tfilter?: 'indexed' | 'named';\n\t\t/** The index of the first variable to return; if omitted children start at 0. */\n\t\tstart?: number;\n\t\t/** The number of variables to return. If count is missing or 0, all variables are returned. */\n\t\tcount?: number;\n\t}\n\n\t/** Response to 'variables' request. */\n\texport interface VariablesResponse extends Response {\n\t\tbody: {\n\t\t\t/** All (or a range) of variables for the given variable reference. */\n\t\t\tvariables: Variable[];\n\t\t};\n\t}\n\n\t/** setVariable request; value of command field is 'setVariable'.\n\t\tSet the variable with the given name in the variable container to a new value.\n\t*/\n\texport interface SetVariableRequest extends Request {\n\t\t// command: 'setVariable';\n\t\targuments: SetVariableArguments;\n\t}\n\n\t/** Arguments for 'setVariable' request. */\n\texport interface SetVariableArguments {\n\t\t/** The reference of the variable container. */\n\t\tvariablesReference: number;\n\t\t/** The name of the variable. */\n\t\tname: string;\n\t\t/** The value of the variable. */\n\t\tvalue: string;\n\t}\n\n\t/** Response to 'setVariable' request. */\n\texport interface SetVariableResponse extends Response {\n\t\tbody: {\n\t\t\t/** The new value of the variable. See capability 'supportsValueEscaping' for details about how to treat newlines in multi-line strings. */\n\t\t\tvalue: string;\n\t\t\t/** The type of the new value. Typically shown in the UI when hovering over the value. */\n\t\t\ttype?: string;\n\t\t\t/** If variablesReference is > 0, the new value is structured and its children can be retrieved by passing variablesReference to the VariablesRequest. */\n\t\t\tvariablesReference?: number;\n\t\t\t/** The number of named child variables.\n\t\t\t\tThe client can use this optional information to present the variables in a paged UI and fetch them in chunks.\n\t\t\t*/\n\t\t\tnamedVariables?: number;\n\t\t\t/** The number of indexed child variables.\n\t\t\t\tThe client can use this optional information to present the variables in a paged UI and fetch them in chunks.\n\t\t\t*/\n\t\t\tindexedVariables?: number;\n\t\t};\n\t}\n\n\t/** Source request; value of command field is 'source'.\n\t\tThe request retrieves the source code for a given source reference.\n\t*/\n\texport interface SourceRequest extends Request {\n\t\t// command: 'source';\n\t\targuments: SourceArguments;\n\t}\n\n\t/** Arguments for 'source' request. */\n\texport interface SourceArguments {\n\t\t/** The reference to the source. This is the value received in Source.reference. */\n\t\tsourceReference: number;\n\t}\n\n\t/** Response to 'source' request. */\n\texport interface SourceResponse extends Response {\n\t\tbody: {\n\t\t\t/** Content of the source reference. */\n\t\t\tcontent: string;\n\t\t\t/** Optional content type (mime type) of the source. */\n\t\t\tmimeType?: string;\n\t\t};\n\t}\n\n\t/** Thread request; value of command field is 'threads'.\n\t\tThe request retrieves a list of all threads.\n\t*/\n\texport interface ThreadsRequest extends Request {\n\t\t// command: 'threads';\n\t}\n\n\t/** Response to 'threads' request. */\n\texport interface ThreadsResponse extends Response {\n\t\tbody: {\n\t\t\t/** All threads. */\n\t\t\tthreads: Thread[];\n\t\t};\n\t}\n\n\t/** Modules can be retrieved from the debug adapter with the ModulesRequest which can either return all modules or a range of modules to support paging. */\n\texport interface ModulesRequest extends Request {\n\t\t// command: 'modules';\n\t\targuments: ModulesArguments;\n\t}\n\n\t/** Arguments for 'modules' request. */\n\texport interface ModulesArguments {\n\t\t/** The index of the first module to return; if omitted modules start at 0. */\n\t\tstartModule?: number;\n\t\t/** The number of modules to return. If moduleCount is not specified or 0, all modules are returned. */\n\t\tmoduleCount?: number;\n\t}\n\n\t/** Response to 'modules' request. */\n\texport interface ModulesResponse extends Response {\n\t\tbody: {\n\t\t\t/** All modules or range of modules. */\n\t\t\tmodules: Module[];\n\t\t\t/** The total number of modules available. */\n\t\t\ttotalModules?: number;\n\t\t};\n\t}\n\n\t/** Evaluate request; value of command field is 'evaluate'.\n\t\tEvaluates the given expression in the context of the top most stack frame.\n\t\tThe expression has access to any variables and arguments that are in scope.\n\t*/\n\texport interface EvaluateRequest extends Request {\n\t\t// command: 'evaluate';\n\t\targuments: EvaluateArguments;\n\t}\n\n\t/** Arguments for 'evaluate' request. */\n\texport interface EvaluateArguments {\n\t\t/** The expression to evaluate. */\n\t\texpression: string;\n\t\t/** Evaluate the expression in the scope of this stack frame. If not specified, the expression is evaluated in the global scope. */\n\t\tframeId?: number;\n\t\t/** The context in which the evaluate request is run. Possible values are 'watch' if evaluate is run in a watch, 'repl' if run from the REPL console, or 'hover' if run from a data hover. */\n\t\tcontext?: string;\n\t}\n\n\t/** Response to 'evaluate' request. */\n\texport interface EvaluateResponse extends Response {\n\t\tbody: {\n\t\t\t/** The result of the evaluate request. See capability 'supportsValueEscaping' for details about how to treat newlines in multi-lines strings. */\n\t\t\tresult: string;\n\t\t\t/** The optional type of the evaluate result. */\n\t\t\ttype?: string;\n\t\t\t/** If variablesReference is > 0, the evaluate result is structured and its children can be retrieved by passing variablesReference to the VariablesRequest. */\n\t\t\tvariablesReference: number;\n\t\t\t/** The number of named child variables.\n\t\t\t\tThe client can use this optional information to present the variables in a paged UI and fetch them in chunks.\n\t\t\t*/\n\t\t\tnamedVariables?: number;\n\t\t\t/** The number of indexed child variables.\n\t\t\t\tThe client can use this optional information to present the variables in a paged UI and fetch them in chunks.\n\t\t\t*/\n\t\t\tindexedVariables?: number;\n\t\t};\n\t}\n\n\t/** StepInTargets request; value of command field is 'stepInTargets'.\n\t\tThis request retrieves the possible stepIn targets for the specified stack frame.\n\t\tThese targets can be used in the 'stepIn' request.\n\t\tThe StepInTargets may only be called if the 'supportsStepInTargetsRequest' capability exists and is true.\n\t*/\n\texport interface StepInTargetsRequest extends Request {\n\t\t// command: 'stepInTargets';\n\t\targuments: StepInTargetsArguments;\n\t}\n\n\t/** Arguments for 'stepInTargets' request. */\n\texport interface StepInTargetsArguments {\n\t\t/** The stack frame for which to retrieve the possible stepIn targets. */\n\t\tframeId: number;\n\t}\n\n\t/** Response to 'stepInTargets' request. */\n\texport interface StepInTargetsResponse extends Response {\n\t\tbody: {\n\t\t\t/** The possible stepIn targets of the specified source location. */\n\t\t\ttargets: StepInTarget[];\n\t\t};\n\t}\n\n\t/** GotoTargets request; value of command field is 'gotoTargets'.\n\t\tThis request retrieves the possible goto targets for the specified source location.\n\t\tThese targets can be used in the 'goto' request.\n\t\tThe GotoTargets request may only be called if the 'supportsGotoTargetsRequest' capability exists and is true.\n\t*/\n\texport interface GotoTargetsRequest extends Request {\n\t\t// command: 'gotoTargets';\n\t\targuments: GotoTargetsArguments;\n\t}\n\n\t/** Arguments for 'gotoTargets' request. */\n\texport interface GotoTargetsArguments {\n\t\t/** The source location for which the goto targets are determined. */\n\t\tsource: Source;\n\t\t/** The line location for which the goto targets are determined. */\n\t\tline: number;\n\t\t/** An optional column location for which the goto targets are determined. */\n\t\tcolumn?: number;\n\t}\n\n\t/** Response to 'gotoTargets' request. */\n\texport interface GotoTargetsResponse extends Response {\n\t\tbody: {\n\t\t\t/** The possible goto targets of the specified location. */\n\t\t\ttargets: GotoTarget[];\n\t\t};\n\t}\n\n\t/** CompletionsRequest request; value of command field is 'completions'.\n\t\tReturns a list of possible completions for a given caret position and text.\n\t\tThe CompletionsRequest may only be called if the 'supportsCompletionsRequest' capability exists and is true.\n\t*/\n\texport interface CompletionsRequest extends Request {\n\t\t// command: 'completions';\n\t\targuments: CompletionsArguments;\n\t}\n\n\t/** Arguments for 'completions' request. */\n\texport interface CompletionsArguments {\n\t\t/** Returns completions in the scope of this stack frame. If not specified, the completions are returned for the global scope. */\n\t\tframeId?: number;\n\t\t/** One or more source lines. Typically this is the text a user has typed into the debug console before he asked for completion. */\n\t\ttext: string;\n\t\t/** The character position for which to determine the completion proposals. */\n\t\tcolumn: number;\n\t\t/** An optional line for which to determine the completion proposals. If missing the first line of the text is assumed. */\n\t\tline?: number;\n\t}\n\n\t/** Response to 'completions' request. */\n\texport interface CompletionsResponse extends Response {\n\t\tbody: {\n\t\t\t/** The possible completions for . */\n\t\t\ttargets: CompletionItem[];\n\t\t};\n\t}\n\n\t/** Information about the capabilities of a debug adapter. */\n\texport interface Capabilities {\n\t\t/** The debug adapter supports the configurationDoneRequest. */\n\t\tsupportsConfigurationDoneRequest?: boolean;\n\t\t/** The debug adapter supports function breakpoints. */\n\t\tsupportsFunctionBreakpoints?: boolean;\n\t\t/** The debug adapter supports conditional breakpoints. */\n\t\tsupportsConditionalBreakpoints?: boolean;\n\t\t/** The debug adapter supports breakpoints that break execution after a specified number of hits. */\n\t\tsupportsHitConditionalBreakpoints?: boolean;\n\t\t/** The debug adapter supports a (side effect free) evaluate request for data hovers. */\n\t\tsupportsEvaluateForHovers?: boolean;\n\t\t/** Available filters for the setExceptionBreakpoints request. */\n\t\texceptionBreakpointFilters?: ExceptionBreakpointsFilter[];\n\t\t/** The debug adapter supports stepping back via the stepBack and reverseContinue requests. */\n\t\tsupportsStepBack?: boolean;\n\t\t/** The debug adapter supports setting a variable to a value. */\n\t\tsupportsSetVariable?: boolean;\n\t\t/** The debug adapter supports restarting a frame. */\n\t\tsupportsRestartFrame?: boolean;\n\t\t/** The debug adapter supports the gotoTargetsRequest. */\n\t\tsupportsGotoTargetsRequest?: boolean;\n\t\t/** The debug adapter supports the stepInTargetsRequest. */\n\t\tsupportsStepInTargetsRequest?: boolean;\n\t\t/** The debug adapter supports the completionsRequest. */\n\t\tsupportsCompletionsRequest?: boolean;\n\t\t/** The debug adapter supports the modules request. */\n\t\tsupportsModulesRequest?: boolean;\n\t\t/** The set of additional module information exposed by the debug adapter. */\n\t\tadditionalModuleColumns?: ColumnDescriptor[];\n\t\t/** Checksum algorithms supported by the debug adapter. */\n\t\tsupportedChecksumAlgorithms?: ChecksumAlgorithm[];\n\t\t/** The debug adapter will be responsible for escaping newlines in variable values and evaluation results, and the client will display them as-is. If missing or false the client will escape newlines as needed. */\n\t\tsupportsValueEscaping?: boolean;\n\t\t/** The debug adapter supports the RestartRequest. In this case a client should not implement 'restart' by terminating and relaunching the adapter but by calling the RestartRequest. */\n\t\tsupportsRestartRequest?: boolean;\n\t}\n\n\t/** An ExceptionBreakpointsFilter is shown in the UI as an option for configuring how exceptions are dealt with. */\n\texport interface ExceptionBreakpointsFilter {\n\t\t/** The internal ID of the filter. This value is passed to the setExceptionBreakpoints request. */\n\t\tfilter: string;\n\t\t/** The name of the filter. This will be shown in the UI. */\n\t\tlabel: string;\n\t\t/** Initial value of the filter. If not specified a value 'false' is assumed. */\n\t\tdefault?: boolean;\n\t}\n\n\t/** A structured message object. Used to return errors from requests. */\n\texport interface Message {\n\t\t/** Unique identifier for the message. */\n\t\tid: number;\n\t\t/** A format string for the message. Embedded variables have the form '{name}'.\n\t\t\tIf variable name starts with an underscore character, the variable does not contain user data (PII) and can be safely used for telemetry purposes.\n\t\t*/\n\t\tformat: string;\n\t\t/** An object used as a dictionary for looking up the variables in the format string. */\n\t\tvariables?: { [key: string]: string; };\n\t\t/** If true send to telemetry. */\n\t\tsendTelemetry?: boolean;\n\t\t/** If true show user. */\n\t\tshowUser?: boolean;\n\t\t/** An optional url where additional information about this message can be found. */\n\t\turl?: string;\n\t\t/** An optional label that is presented to the user as the UI for opening the url. */\n\t\turlLabel?: string;\n\t}\n\n\t/** A Module object represents a row in the modules view.\n\t\tTwo attributes are mandatory: an id identifies a module in the modules view and is used in a ModuleEvent for identifying a module for adding, updating or deleting.\n\t\tThe name is used to minimally render the module in the UI.\n\t\t\n\t\tAdditional attributes can be added to the module. They will show up in the module View if they have a corresponding ColumnDescriptor.\n\t\t\n\t\tTo avoid an unnecessary proliferation of additional attributes with similar semantics but different names\n\t\twe recommend to re-use attributes from the 'recommended' list below first, and only introduce new attributes if nothing appropriate could be found.\n\t*/\n\texport interface Module {\n\t\t/** Unique identifier for the module. */\n\t\tid: number | string;\n\t\t/** A name of the module. */\n\t\tname: string;\n\t\t/** optional but recommended attributes.\n\t\t\talways try to use these first before introducing additional attributes.\n\t\t\t\n\t\t\tLogical full path to the module. The exact definition is implementation defined, but usually this would be a full path to the on-disk file for the module.\n\t\t*/\n\t\tpath?: string;\n\t\t/** True if the module is optimized. */\n\t\tisOptimized?: boolean;\n\t\t/** True if the module is considered 'user code' by a debugger that supports 'Just My Code'. */\n\t\tisUserCode?: boolean;\n\t\t/** Version of Module. */\n\t\tversion?: string;\n\t\t/** User understandable description of if symbols were found for the module (ex: 'Symbols Loaded', 'Symbols not found', etc. */\n\t\tsymbolStatus?: string;\n\t\t/** Logical full path to the symbol file. The exact definition is implementation defined. */\n\t\tsymbolFilePath?: string;\n\t\t/** Module created or modified. */\n\t\tdateTimeStamp?: string;\n\t\t/** Address range covered by this module. */\n\t\taddressRange?: string;\n\t}\n\n\t/** A ColumnDescriptor specifies what module attribute to show in a column of the ModulesView, how to format it, and what the column's label should be.\n\t\tIt is only used if the underlying UI actually supports this level of customization.\n\t*/\n\texport interface ColumnDescriptor {\n\t\t/** Name of the attribute rendered in this column. */\n\t\tattributeName: string;\n\t\t/** Header UI label of column. */\n\t\tlabel: string;\n\t\t/** Format to use for the rendered values in this column. TBD how the format strings looks like. */\n\t\tformat?: string;\n\t\t/** Datatype of values in this column.  Defaults to 'string' if not specified. */\n\t\ttype?: 'string' | 'number' | 'boolean' | 'unixTimestampUTC';\n\t\t/** Width of this column in characters (hint only). */\n\t\twidth?: number;\n\t}\n\n\t/** The ModulesViewDescriptor is the container for all declarative configuration options of a ModuleView.\n\t\tFor now it only specifies the columns to be shown in the modules view.\n\t*/\n\texport interface ModulesViewDescriptor {\n\t\tcolumns: ColumnDescriptor[];\n\t}\n\n\t/** A Thread */\n\texport interface Thread {\n\t\t/** Unique identifier for the thread. */\n\t\tid: number;\n\t\t/** A name of the thread. */\n\t\tname: string;\n\t}\n\n\t/** A Source is a descriptor for source code. It is returned from the debug adapter as part of a StackFrame and it is used by clients when specifying breakpoints. */\n\texport interface Source {\n\t\t/** The short name of the source. Every source returned from the debug adapter has a name. When specifying a source to the debug adapter this name is optional. */\n\t\tname?: string;\n\t\t/** The long (absolute) path of the source. It is not guaranteed that the source exists at this location. */\n\t\tpath?: string;\n\t\t/** If sourceReference > 0 the contents of the source can be retrieved through the SourceRequest. A sourceReference is only valid for a session, so it must not be used to persist a source. */\n\t\tsourceReference?: number;\n\t\t/** The (optional) origin of this source: possible values 'internal module', 'inlined content from source map', etc. */\n\t\torigin?: string;\n\t\t/** Optional data that a debug adapter might want to loop through the client. The client should leave the data intact and persist it across sessions. The client should not interpret the data. */\n\t\tadapterData?: any;\n\t\t/** The checksums associated with this file. */\n\t\tchecksums?: Checksum[];\n\t}\n\n\t/** A Stackframe contains the source location. */\n\texport interface StackFrame {\n\t\t/** An identifier for the stack frame. It must be unique across all threads. This id can be used to retrieve the scopes of the frame with the 'scopesRequest' or to restart the execution of a stackframe. */\n\t\tid: number;\n\t\t/** The name of the stack frame, typically a method name. */\n\t\tname: string;\n\t\t/** The optional source of the frame. */\n\t\tsource?: Source;\n\t\t/** The line within the file of the frame. If source is null or doesn't exist, line is 0 and must be ignored. */\n\t\tline: number;\n\t\t/** The column within the line. If source is null or doesn't exist, column is 0 and must be ignored. */\n\t\tcolumn: number;\n\t\t/** An optional end line of the range covered by the stack frame. */\n\t\tendLine?: number;\n\t\t/** An optional end column of the range covered by the stack frame. */\n\t\tendColumn?: number;\n\t\t/** The module associated with this frame, if any. */\n\t\tmoduleId?: number | string;\n\t}\n\n\t/** A Scope is a named container for variables. Optionally a scope can map to a source or a range within a source. */\n\texport interface Scope {\n\t\t/** Name of the scope such as 'Arguments', 'Locals'. */\n\t\tname: string;\n\t\t/** The variables of this scope can be retrieved by passing the value of variablesReference to the VariablesRequest. */\n\t\tvariablesReference: number;\n\t\t/** The number of named variables in this scope.\n\t\t\tThe client can use this optional information to present the variables in a paged UI and fetch them in chunks.\n\t\t*/\n\t\tnamedVariables?: number;\n\t\t/** The number of indexed variables in this scope.\n\t\t\tThe client can use this optional information to present the variables in a paged UI and fetch them in chunks.\n\t\t*/\n\t\tindexedVariables?: number;\n\t\t/** If true, the number of variables in this scope is large or expensive to retrieve. */\n\t\texpensive: boolean;\n\t\t/** Optional source for this scope. */\n\t\tsource?: Source;\n\t\t/** Optional start line of the range covered by this scope. */\n\t\tline?: number;\n\t\t/** Optional start column of the range covered by this scope. */\n\t\tcolumn?: number;\n\t\t/** Optional end line of the range covered by this scope. */\n\t\tendLine?: number;\n\t\t/** Optional end column of the range covered by this scope. */\n\t\tendColumn?: number;\n\t}\n\n\t/** A Variable is a name/value pair.\n\t\tOptionally a variable can have a 'type' that is shown if space permits or when hovering over the variable's name.\n\t\tAn optional 'kind' is used to render additional properties of the variable, e.g. different icons can be used to indicate that a variable is public or private.\n\t\tIf the value is structured (has children), a handle is provided to retrieve the children with the VariablesRequest.\n\t\tIf the number of named or indexed children is large, the numbers should be returned via the optional 'namedVariables' and 'indexedVariables' attributes.\n\t\tThe client can use this optional information to present the children in a paged UI and fetch them in chunks.\n\t*/\n\texport interface Variable {\n\t\t/** The variable's name. */\n\t\tname: string;\n\t\t/** The variable's value. This can be a multi-line text, e.g. for a function the body of a function. See capability 'supportsValueEscaping' for details about how to treat newlines in multi-line strings. */\n\t\tvalue: string;\n\t\t/** The type of the variable's value. Typically shown in the UI when hovering over the value. */\n\t\ttype?: string;\n\t\t/** Properties of a variable that can be used to determine how to render the variable in the UI. Format of the string value: TBD. */\n\t\tkind?: string;\n\t\t/** Optional evaluatable name of this variable which can be passed to the 'EvaluateRequest' to fetch the variable's value. */\n\t\tevaluateName?: string;\n\t\t/** If variablesReference is > 0, the variable is structured and its children can be retrieved by passing variablesReference to the VariablesRequest. */\n\t\tvariablesReference: number;\n\t\t/** The number of named child variables.\n\t\t\tThe client can use this optional information to present the children in a paged UI and fetch them in chunks.\n\t\t*/\n\t\tnamedVariables?: number;\n\t\t/** The number of indexed child variables.\n\t\t\tThe client can use this optional information to present the children in a paged UI and fetch them in chunks.\n\t\t*/\n\t\tindexedVariables?: number;\n\t}\n\n\t/** Properties of a breakpoint passed to the setBreakpoints request. */\n\texport interface SourceBreakpoint {\n\t\t/** The source line of the breakpoint. */\n\t\tline: number;\n\t\t/** An optional source column of the breakpoint. */\n\t\tcolumn?: number;\n\t\t/** An optional expression for conditional breakpoints. */\n\t\tcondition?: string;\n\t\t/** An optional expression that controls how many hits of the breakpoint are ignored. The backend is expected to interpret the expression as needed. */\n\t\thitCondition?: string;\n\t}\n\n\t/** Properties of a breakpoint passed to the setFunctionBreakpoints request. */\n\texport interface FunctionBreakpoint {\n\t\t/** The name of the function. */\n\t\tname: string;\n\t\t/** An optional expression for conditional breakpoints. */\n\t\tcondition?: string;\n\t\t/** An optional expression that controls how many hits of the breakpoint are ignored. The backend is expected to interpret the expression as needed. */\n\t\thitCondition?: string;\n\t}\n\n\t/** Information about a Breakpoint created in setBreakpoints or setFunctionBreakpoints. */\n\texport interface Breakpoint {\n\t\t/** An optional unique identifier for the breakpoint. */\n\t\tid?: number;\n\t\t/** If true breakpoint could be set (but not necessarily at the desired location). */\n\t\tverified: boolean;\n\t\t/** An optional message about the state of the breakpoint. This is shown to the user and can be used to explain why a breakpoint could not be verified. */\n\t\tmessage?: string;\n\t\t/** The source where the breakpoint is located. */\n\t\tsource?: Source;\n\t\t/** The start line of the actual range covered by the breakpoint. */\n\t\tline?: number;\n\t\t/** An optional start column of the actual range covered by the breakpoint. */\n\t\tcolumn?: number;\n\t\t/** An optional end line of the actual range covered by the breakpoint. */\n\t\tendLine?: number;\n\t\t/** An optional end column of the actual range covered by the breakpoint. If no end line is given, then the end column is assumed to be in the start line. */\n\t\tendColumn?: number;\n\t}\n\n\t/** A StepInTarget can be used in the 'stepIn' request and determines into which single target the stepIn request should step. */\n\texport interface StepInTarget {\n\t\t/** Unique identifier for a stepIn target. */\n\t\tid: number;\n\t\t/** The name of the stepIn target (shown in the UI). */\n\t\tlabel: string;\n\t}\n\n\t/** A GotoTarget describes a code location that can be used as a target in the 'goto' request.\n\t\tThe possible goto targets can be determined via the 'gotoTargets' request.\n\t*/\n\texport interface GotoTarget {\n\t\t/** Unique identifier for a goto target. This is used in the goto request. */\n\t\tid: number;\n\t\t/** The name of the goto target (shown in the UI). */\n\t\tlabel: string;\n\t\t/** The line of the goto target. */\n\t\tline: number;\n\t\t/** An optional column of the goto target. */\n\t\tcolumn?: number;\n\t\t/** An optional end line of the range covered by the goto target. */\n\t\tendLine?: number;\n\t\t/** An optional end column of the range covered by the goto target. */\n\t\tendColumn?: number;\n\t}\n\n\t/** CompletionItems are the suggestions returned from the CompletionsRequest. */\n\texport interface CompletionItem {\n\t\t/** The label of this completion item. By default this is also the text that is inserted when selecting this completion. */\n\t\tlabel: string;\n\t\t/** If text is not falsy then it is inserted instead of the label. */\n\t\ttext?: string;\n\t\t/** The item's type. Typically the client uses this information to render the item in the UI with an icon. */\n\t\ttype?: CompletionItemType;\n\t\t/** When a completion is selected it replaces 'length' characters starting at 'start' in the text passed to the CompletionsRequest.\n\t\t\tIf missing the frontend will try to determine these values heuristically.\n\t\t*/\n\t\tstart?: number;\n\t\tlength?: number;\n\t}\n\n\t/** Some predefined types for the CompletionItem. Please note that not all clients have specific icons for all of them. */\n\texport type CompletionItemType = 'method' | 'function' | 'constructor' | 'field' | 'variable' | 'class' | 'interface' | 'module' | 'property' | 'unit' | 'value' | 'enum' | 'keyword' | 'snippet' | 'text' | 'color' | 'file' | 'reference' | 'customcolor';\n\n\t/** Names of checksum algorithms that may be supported by a debug adapter. */\n\texport type ChecksumAlgorithm = 'MD5' | 'SHA1' | 'SHA256' | 'SHA1Normalized' | 'SHA256Normalized' | 'timestamp';\n\n\t/** The checksum of an item calculated by the specified algorithm. */\n\texport interface Checksum {\n\t\t/** The algorithm used to calculate this checksum. */\n\t\talgorithm: ChecksumAlgorithm;\n\t\t/** Value of the checksum. */\n\t\tchecksum: string;\n\t}\n}\n\n"]}