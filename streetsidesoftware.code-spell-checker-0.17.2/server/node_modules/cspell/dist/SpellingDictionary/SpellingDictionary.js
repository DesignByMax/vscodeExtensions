"use strict";
const suggest_1 = require("./suggest");
const Trie_1 = require("./Trie");
const gensequence_1 = require("gensequence");
class SpellingDictionaryInstance {
    constructor(words) {
        this.words = words;
    }
    get trie() {
        this._trie = this._trie || buildTrieFromSet(this.words);
        return this._trie;
    }
    has(word) {
        return this.words.has(word.toLowerCase());
    }
    suggest(word, numSuggestions) {
        return suggest_1.suggest(this.trie, word.toLowerCase(), numSuggestions);
    }
    get size() {
        return this.words.size;
    }
}
exports.SpellingDictionaryInstance = SpellingDictionaryInstance;
function buildTrieFromSet(words) {
    return gensequence_1.genSequence(words)
        .reduce((trie, word) => Trie_1.addWordToTrie(trie, word), Trie_1.createTrie());
}
function createSpellingDictionary(wordList) {
    const words = new Set(gensequence_1.genSequence(wordList).map(word => word.toLowerCase().trim()));
    return new SpellingDictionaryInstance(words);
}
exports.createSpellingDictionary = createSpellingDictionary;
function createSpellingDictionaryRx(words) {
    const promise = words
        .map(word => word.toLowerCase().trim())
        .reduce((words, word) => words.add(word), new Set())
        .map(words => new SpellingDictionaryInstance(words))
        .toPromise();
    return promise;
}
exports.createSpellingDictionaryRx = createSpellingDictionaryRx;
//# sourceMappingURL=SpellingDictionary.js.map